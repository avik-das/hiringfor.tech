---
---

@import "core";
@import "nav";

$body-padding: 1em;

body { padding-bottom: 96px; }

body > * {
  max-width: 50em;
  margin: 0 auto;
  padding: 0 $body-padding;
}

#cover-img {
  /* Normally, without a cover image, the layout sets up some spacing (using
   * margins) between the title and the body text. When there is a cover image,
   * the image is placed between the title and the body text.
   *
   * Tighten up the spacing between the title and the image, as the spacing
   * should look different when image is involved.. By applying these styles on
   * the cover image, the image space essentially "overrides" the default,
   * text-only spacing. */
  margin-top: -16px;
}

.tag {
  padding: 4px;
  border-radius: 4px;
  border: 1px solid #0002;

  font-size: 60%;

  &[data-tag="employers"]    { background: #ffd9d9; }
  &[data-tag="interviewers"] { background: #ddf9e2; }
  &[data-tag="candidates"]   { background: #e1daff; }
}

h1 { margin-top: 64px; }
h1, address { text-align: center; }
address { margin: 8px auto; }

#posts, #content { margin-top: 64px; }

figure {
  margin: 0;
  padding: 0;
  text-align: center;

  img {
    max-width: calc(100% + #{$body-padding * 2});
    margin: 0 0 0 #{-$body-padding};
  }

  .youtube-video {
    // Scaling Youtube videos is not trivial. The problem is, unlike an image,
    // the iframe used to embed the video does not have a "natural" height.
    // Thus, the HTML needs to specify both a static width and height. When the
    // width is changed with the above CSS, the height does not change.
    //
    // To scale the height automatically with the width, we do the following:
    //
    // - Wrap the iframe in a div. This container is the one whose width is
    //   set above.
    //
    // - Use `padding-bottom` to choose a height for the container relative to
    //   the width. The reason for choosing `padding-bottom` is outlined in
    //   this alistapart article [1]. Because we want this padding to fully
    //   control the height of the container, the height is set to zero.
    //
    // - The iframe contained inside the wrapper element is set to fill up the
    //   entire container using `position: absolute`. This requires the
    //   container to be position via `position: relative`, so that the iframe
    //   is laid out relative to the container (the `position` attribute
    //   performs positioning relative to the nearest parent with a `position`
    //   attribute).
    //
    // Unfortunately, because divs and iframes don't have a natural aspect
    // ratio, we have to specify one. Here, all Youtube videos will have an
    // aspect ratio of 16:9, which is what leads to the height to width ratio
    // of 9/16 = 56.25%.
    //
    // [1] http://alistapart.com/article/creating-intrinsic-ratios-for-video/

    position: relative;

    height: 0;
    padding-bottom: calc(56.25% + #{$body-padding * 2 * 0.5625});

    // Unlike images, which sometimes are skinny enough to not fill up the
    // entire width of the screen, Youtube videos will always be large enough.
    // Due to some strange interaction with iframes, we have to force these
    // videos to take up their maximum width.
    //
    // Thus, images have a max-width and Youtube videos have a width.
    width: calc(100% + #{$body-padding * 2});
    margin: 16px 0 16px #{-$body-padding};

    > iframe {
      position: absolute;
      left: 0;
      right: 0;
      width: 100%;
      height: 100%;
    }
  }

  figcaption {
    font-style: italic;
    font-size: .95em;
  }
}

blockquote {
  margin-left: 16px;
  padding-left: 24px;
  border-left: 3px solid #ddd;
}

table {
  margin: auto;
  min-width: 50%;
  border: 2px solid #ffc107;

  border-collapse: collapse;

  th, td {
    // TH is usually center-aligned
    text-align: left;
    padding: 8px 16px;
  }

  th { background: #ffc107; }
  tr:nth-child(even) td { background: lighten(#ffc107, 40%); }
}

#content hr {
  width: 50%;
  border: 0;
  border-top: 1px solid #ccc;
}

#posts {
  h2 { margin-top: 48px; }

  ul {
    list-style: none;
    padding-left: 0;

    li { margin-bottom: 16px; }
  }
}

#tag-list { margin-top: 32px; }
